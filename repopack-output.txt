This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-12-18T14:38:27.656Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
src/
  components/
    Layout.astro
  pages/
    dashboard.astro
    index.astro
  styles/
    globals.css
  content.config.ts
  env.d.ts
  middleware.ts

================================================================
Repository Files
================================================================

================
File: src/components/Layout.astro
================
---
import "../styles/globals.css";
import { SignedIn, SignedOut, UserButton, SignInButton } from "@clerk/astro/components";

const { title } = Astro.props;
---

<html lang="en">

  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>

  <body class="min-h-screen bg-background font-sans antialiased">
    <header class="sticky top-0 z-50 w-full bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div class="container flex h-14 items-center justify-between">
        <h1 class="text-lg font-semibold">{title}</h1>
        <nav class="flex items-center gap-4">
          <SignedOut>
            <SignInButton mode="modal" />
          </SignedOut>
          <SignedIn>
            <UserButton />
          </SignedIn>
        </nav>
      </div>
    </header>

    <main class="container py-6 md:py-8 flex justify-center items-center">
      <slot />
    </main>

  </body>
</html>

================
File: src/pages/dashboard.astro
================
---
import Layout from '../components/Layout.astro'
---

<Layout title="Astro 5 + Clerk">
  <div class="flex flex-col items-center gap-4 min-h-screen">
    <h1 class="text-2xl font-bold text-white">
      Dashboard
    </h1>
    <p>
      Protected route. Only logged in users can see this page.
    </p>
    <a 
    href="/" 
    class="text-blue-400 hover:text-blue-300 underline underline-offset-2 transition-colors"
  >
    Go to home
  </a>
  </div>
</Layout>

================
File: src/pages/index.astro
================
---
import Layout from '../components/Layout.astro'

const user = await Astro.locals.currentUser()
---

<Layout title="Astro 5 + Clerk Demo">
  <div class="flex flex-col items-center gap-4 min-h-screen">
    {!user ? (
      <div class="flex flex-col items-center gap-6 text-center">
        <h1 class="text-2xl font-bold text-white">Sign in to try it out</h1>
        <a 
          href="/dashboard" 
          class="text-blue-400 hover:text-blue-300 underline underline-offset-2 transition-colors"
        >
          Go to dashboard (requires login)
        </a>
        <div class="flex items-center gap-4 mt-2">
          <img 
            src="https://astro.build/assets/press/astro-logo-light.svg" 
            alt="Astro Logo" 
            class="h-8"
          />
          <span class="text-white text-xl">+</span>
          <img 
            src="https://avatars.githubusercontent.com/u/49538330?s=280&v=4" 
            alt="Clerk Logo" 
            class="h-12 w-12 rounded-full"
          />
        </div>
      </div>
    ) : (
      <>
        <h1 class="text-white text-2xl font-bold">Welcome, {user?.firstName}!</h1>
        <a 
          href="/dashboard" 
          class="text-blue-400 hover:text-blue-300 underline underline-offset-2 transition-colors"
        >
          Go to dashboard
        </a>
        <pre class="bg-gray-900 text-white p-6 rounded-lg overflow-auto w-full max-w-2xl border border-gray-700 text-xs font-mono">
          <code>{JSON.stringify(user, null, 2).trim()}</code>
        </pre>
      </>
    )}

  </div>
</Layout>

================
File: src/styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind components;

html,
body {
  background: black;
  color: white;
  font-weight: 800;
}

================
File: src/content.config.ts
================
import { defineCollection } from 'astro:content';

export const collections = {
	docs: defineCollection({}),
};

================
File: src/env.d.ts
================
/// <reference types="astro/client" />
/// <reference types="@clerk/astro/env" />

================
File: src/middleware.ts
================
import { clerkMiddleware, createRouteMatcher } from "@clerk/astro/server";

const isProtectedRoute = createRouteMatcher(['/dashboard(.*)', ''])

export const onRequest = clerkMiddleware((auth, context) => {
  const { redirectToSignIn, userId } = auth()

  if (!userId && isProtectedRoute(context.request)) {

    return redirectToSignIn()
  }
})
